################### top matter ################
CMAKE_MINIMUM_REQUIRED(VERSION 2.8.8)

SET(ASPECT_BINARY "${ASPECT_BINARY}" CACHE STRING "" FORCE)
SET(ASPECT_DIR "${ASPECT_DIR}" CACHE STRING "" FORCE)
FIND_PACKAGE(Aspect 1.5.0 QUIET HINTS ${ASPECT_DIR})
DEAL_II_INITIALIZE_CACHED_VARIABLES()

FIND_PACKAGE(Perl)

MESSAGE(STATUS "Setting up tests with CMAKE_BUILD_TYPE ${CMAKE_BUILD_TYPE}")

PROJECT(testsuite CXX)

ENABLE_TESTING()

MACRO(SET_IF_EMPTY _variable _value)
  IF("${${_variable}}" STREQUAL "")
    SET(${_variable} ${_value})
  ENDIF()
ENDMACRO()

# suppress mac os warning
IF(APPLE AND NOT DEFINED CMAKE_MACOSX_RPATH)
  SET(CMAKE_MACOSX_RPATH 0) # see policy CMP0042
ENDIF()

# A function that extracts from a file (presumably a .prm file)
# the number of MPI processes this test is to be invoked as.
# This is encoded in .prm files through lines of the form
#    '# MPI: 4'
# The result is returned in a variable _mpi_count in the
# caller's scope.
FUNCTION(get_mpi_count _filename)
  FILE(STRINGS ${_filename} _input_lines
       REGEX "MPI:")
  IF("${_input_lines}" STREQUAL "")
    SET(_mpi_count 1 PARENT_SCOPE)
  ELSE()
    # go over the (possibly multiple) lines with MPI markers and choose the last
    FOREACH(_input_line ${_input_lines})
     SET(_last_line ${_input_line})
    ENDFOREACH()
    STRING(REGEX REPLACE "^ *# *MPI: *([0-9]+) *$" "\\1"
           _mpi_count ${_last_line})
    SET(_mpi_count "${_mpi_count}" PARENT_SCOPE)
  ENDIF()
ENDFUNCTION()

# Analyze the .prm to decide if this test should be run or not. We are
# checking for the following strings in the .prm:
# 1. "LINEAR ALGEBRA: PETSC" - only run with PETSc, "LINEAR ALGEBRA: PETSC
# TRILINOS" - run with PETSc and Trilinos. If neither is present we only run
# using Trilinos.
# 2. "QUICK_TEST" - enable the test even if RUN_ALL_TESTS is false 
FUNCTION(SHOULD_ENABLE_TEST _filename)

  FILE(STRINGS ${_filename} _input_lines
       REGEX "LINEAR ALGEBRA:")
  IF("${_input_lines}" STREQUAL "")
    # file doesn't contain LINEAR ALGEBRA command, so
    # treat the test as TRILINOS.
    IF(ASPECT_USE_PETSC)
      SET(_use_test OFF PARENT_SCOPE)
    ENDIF()
  ELSE()

    # merge multiple lines:
    STRING (REPLACE ";" "" _input_lines "${_input_lines}")

    IF (NOT ${_input_lines} MATCHES "PETSC" AND ASPECT_USE_PETSC)
      SET(_use_test OFF PARENT_SCOPE)
    ENDIF()

    IF (NOT ${_input_lines} MATCHES "TRILINOS" AND NOT ASPECT_USE_PETSC)
      SET(_use_test OFF PARENT_SCOPE)
    ENDIF()
  ENDIF()

  FILE(STRINGS ${_filename} _input_lines
       REGEX "QUICK_TEST")
  IF(NOT ASPECT_RUN_ALL_TESTS AND "${_input_lines}" STREQUAL "")
    SET(_use_test OFF PARENT_SCOPE)
  ENDIF()
ENDFUNCTION()


# set a time limit of 10 minutes per test. this should be long
# enough even for long-running tests, and short enough to not
# get into trouble should we have an infinite loop.
SET_IF_EMPTY(TEST_TIME_LIMIT 600)

############################3

ADD_CUSTOM_TARGET(tests)

#
# We need a diff tool, preferably numdiff otherwise diff. Let the user
# override it by specifying TEST_DIFF.
#
FIND_PROGRAM(DIFF_EXECUTABLE
  NAMES diff
  HINTS ${DIFF_DIR}
  PATH_SUFFIXES bin
  )

FIND_PROGRAM(NUMDIFF_EXECUTABLE
  NAMES numdiff
  HINTS ${NUMDIFF_DIR}
  PATH_SUFFIXES bin
  )

MARK_AS_ADVANCED(DIFF_EXECUTABLE NUMDIFF_EXECUTABLE)

IF("${TEST_DIFF}" STREQUAL "")
  #

  IF(NOT NUMDIFF_EXECUTABLE MATCHES "-NOTFOUND")
    SET(TEST_DIFF ${NUMDIFF_EXECUTABLE})
  ELSEIF(NOT DIFF_EXECUTABLE MATCHES "-NOTFOUND")
    SET(TEST_DIFF ${DIFF_EXECUTABLE})
  ELSE()
    MESSAGE(FATAL_ERROR
      "Could not find diff or numdiff. One of those are required for running the testsuite.\n"
      "Please specify TEST_DIFF by hand."
      )
  ENDIF()
ENDIF()

FILE(GLOB _tests *.prm)

SET(_n_tests "0")
LIST(SORT _tests)
FOREACH(_test ${_tests})
  SET(_test_full ${_test})
  GET_FILENAME_COMPONENT(_test ${_test} NAME_WE)

  SET(_use_test ON)

  IF ("${_test}" STREQUAL "")
    MESSAGE("Ignoring invalid .prm '${_test_full}'...")
    SET(_use_test OFF)
  ENDIF()
  IF (${_test_full} MATCHES "\\.x\\.prm$")
    # Skip files generated by in source builds:
    SET(_use_test OFF)
  ENDIF()

  SHOULD_ENABLE_TEST(${CMAKE_CURRENT_SOURCE_DIR}/${_test}.prm)

  IF(_use_test)

    # Create main target for this test. We let it depend on the screen output
    # even if the folder with reference data for this test doesn't contain any
    # files. This is useful when you are constructing a new test.
    ADD_CUSTOM_TARGET(tests.${_test}
	DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/output-${_test}/screen-output)

    MATH(EXPR _n_tests "${_n_tests} + 1")

    IF(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${_test}.cc)
      ADD_LIBRARY(${_test} SHARED EXCLUDE_FROM_ALL ${_test}.cc)
      ASPECT_SETUP_PLUGIN(${_test})

      SET(_testlib 'set Additional shared libraries = ./lib${_test}.so')
      SET(_testdepends ${_test})
    ELSE()
      SET(_testlib)
      SET(_testdepends)
    ENDIF()

    # Create the output directory and subdirectories as needed. To do this, we
    # recursively glob all files (and only files, not subdirectories) located
    # in this test's directory.  For each file get the directory part relative
    # to the test directory and create a corresponding subdirectory in the
    # output directory of this test. MAKE_DIRECTORY then does a `mkdir -p`.
    FILE(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/output-${_test})

    FILE(GLOB_RECURSE _outputs RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}/${_test}/
	${CMAKE_CURRENT_SOURCE_DIR}/${_test}/[a-zA-Z0-9]*)
    FOREACH(_output ${_outputs})

      # get the directory name we should work on; for cmake <2.8.11, the
      # subcommand was PATH (legacy), for everything after we can use
      # DIRECTORY
      IF (${CMAKE_VERSION} VERSION_LESS "2.8.12")
        GET_FILENAME_COMPONENT(_dir ${_output} PATH)
      ELSE()
        GET_FILENAME_COMPONENT(_dir ${_output} DIRECTORY)
      ENDIF()
      IF(NOT  ${_dir} STREQUAL "" )
        FILE(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/output-${_test}/${_dir})
      ENDIF()
    ENDFOREACH()

    # A rule to generate the input file therein.  This input file is copied
    # from the one found in the source dir, but we make sure it has the
    # correct output directory so that we do not need to specify it by hand (a
    # common mistake when copying a previous test) and we specify any
    # additional plugin shared libraries, should they exist for this test
    #
    # We also replace all occurrences of @SOURCE_DIR@ by
    # ${CMAKE_CURRENT_SOURCE_DIR} so that input files can reference
    # mesh, input files, etc, in the tests/ directory without having
    # to know where exactly they are run.
    ADD_CUSTOM_COMMAND(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${_test}.x.prm
      COMMAND cp ${CMAKE_CURRENT_SOURCE_DIR}/${_test}.prm
		 ${CMAKE_CURRENT_BINARY_DIR}/${_test}.x.prm
      COMMAND echo ''
		 >> ${CMAKE_CURRENT_BINARY_DIR}/${_test}.x.prm
      COMMAND echo 'set Output directory = output-${_test}'
		 >> ${CMAKE_CURRENT_BINARY_DIR}/${_test}.x.prm
      COMMAND echo '${_testlib}'
		 >> ${CMAKE_CURRENT_BINARY_DIR}/${_test}.x.prm
      COMMAND ${PERL_EXECUTABLE} -pi
		 -e 's!\\@SOURCE_DIR\\@!${CMAKE_CURRENT_SOURCE_DIR}!g;'
		 ${CMAKE_CURRENT_BINARY_DIR}/${_test}.x.prm
      DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/${_test}.prm
      )

    # then generate a rule that runs aspect and normalizes the output
    # files. Before running aspect, delete prior content of the directory to
    # make sure no dead files are left there (this is one way to trip up the
    # 'terminate_user_request' test of Aspect which terminates the program when
    # a certain file appears). we have to take care of not deleting those
    # files that have been placed there on purpose, however, which are all
    # of the .cmp.notime files.
    #
    # the actual run command is a bit complicated because we have to figure out
    # whether we want the test to run in parallel using MPI or not
    GET_MPI_COUNT(${CMAKE_CURRENT_SOURCE_DIR}/${_test}.prm)

    # detect the optional script <testname>.sh that a test can use to process
    # output (currently screen-output only).
    IF(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${_test}.sh)
        SET(_replacement_script "${CMAKE_CURRENT_SOURCE_DIR}/${_test}.sh")
        SET(_testdepends ${_testdepends} ${CMAKE_CURRENT_SOURCE_DIR}/${_test}.sh)
    ELSE()
        SET(_replacement_script "${CMAKE_CURRENT_SOURCE_DIR}/cmake/default")
    ENDIF()

    # If a .prm contains the keyword "EXPECT FAILURE", make sure aspect fails
    # with a non-zero return value. Otherwise make sure aspect terminates
    # without errors. The logic for this is in tests/cmake/run_test.sh,
    # because we can not do this in ADD_CUSTOM_COMMAND directly.
    FILE(STRINGS ${CMAKE_CURRENT_SOURCE_DIR}/${_test}.prm _input_lines REGEX "EXPECT FAILURE")
    IF("${_input_lines}" STREQUAL "")
      SET(EXPECT "0")
    ELSE()
      SET(EXPECT "1")
      IF (NOT "${_mpi_count}" STREQUAL "1")
        MESSAGE(FATAL_ERROR "Invalid setup in test '${_test}.prm': Tests with 'EXPECT FAILURE' are only supported if they use a single MPI rank.")
      ENDIF()
    ENDIF()

    IF("${_mpi_count}" STREQUAL "1")
      ADD_CUSTOM_COMMAND(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/output-${_test}/screen-output
	COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/cmake/run_test.sh ${EXPECT} ${ASPECT_BINARY} ${CMAKE_CURRENT_BINARY_DIR}/${_test}.x.prm ${CMAKE_CURRENT_BINARY_DIR}/output-${_test}/screen-output.tmp
	COMMAND ${_replacement_script} screen-output <${CMAKE_CURRENT_BINARY_DIR}/output-${_test}/screen-output.tmp >${CMAKE_CURRENT_BINARY_DIR}/output-${_test}/screen-output
	DEPENDS ${ASPECT_BINARY}   ${CMAKE_CURRENT_BINARY_DIR}/${_test}.x.prm ${_testdepends}
	)
    ELSE()
      ADD_CUSTOM_COMMAND(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/output-${_test}/screen-output
	COMMAND mpirun -np ${_mpi_count} ${ASPECT_BINARY} ${CMAKE_CURRENT_BINARY_DIR}/${_test}.x.prm
		> ${CMAKE_CURRENT_BINARY_DIR}/output-${_test}/screen-output.tmp
	COMMAND ${_replacement_script} screen-output <${CMAKE_CURRENT_BINARY_DIR}/output-${_test}/screen-output.tmp >${CMAKE_CURRENT_BINARY_DIR}/output-${_test}/screen-output
	DEPENDS ${ASPECT_BINARY}  ${CMAKE_CURRENT_BINARY_DIR}/${_test}.x.prm ${_testdepends}
	)
    ENDIF()

    # command to normalize all output files and all reference output files
    ADD_CUSTOM_TARGET(${_test}.normalize
	COMMAND ${PERL_EXECUTABLE} -pi
		  ${CMAKE_CURRENT_SOURCE_DIR}/normalize.pl
		  `find ${CMAKE_CURRENT_BINARY_DIR}/output-${_test}/ -type f`
	DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/output-${_test}/screen-output)

    # for each of the output files saved in the source directory for
    # this test, create targets that
    # - create a 'output.notime' file
    # - diff this file with the saved one and save the result
    FILE(GLOB_RECURSE _outputs RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}/${_test}/
	${CMAKE_CURRENT_SOURCE_DIR}/${_test}/[a-zA-Z0-9]*)

    FOREACH(_output ${_outputs})

      GET_FILENAME_COMPONENT(ASPECT_BASE_DIR ${CMAKE_CURRENT_SOURCE_DIR} PATH)

      # create the output.notime targets for each of the output files,
      # and also create a similar file for all of the input files (this
      # avoids the need to strip timing information from files we may
      # copy from tests we have just run to the directory where we save
      # these files
      #
      # do the same with the second egrep command to strip out the status
      # message at the top of the run
      ADD_CUSTOM_COMMAND(
	OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/output-${_test}/${_output}.cmp.notime
	COMMAND
	  cat ${CMAKE_CURRENT_SOURCE_DIR}/${_test}/${_output}
	  | egrep -v '^\\|'
	  | egrep -v '^--'
	  > ${CMAKE_CURRENT_BINARY_DIR}/output-${_test}/${_output}.cmp.notime
	DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/${_test}/${_output}
      )

      # The screen-output target needs to normalize the .cmp.notime
      # tests. They need to exist first, so add an explicit dependency. To do
      # that, we first create a target to the command above (ADD_DEPENDENCIES
      # can only deal with targets, not commands). Finally, we need to remove "/"
      # (illegal in target names).
      STRING(REPLACE "/" "-" _target_name_copy_output make-${_test}-${_output}.cmp.notime)
      ADD_CUSTOM_TARGET(${_target_name_copy_output}
	DEPENDS	${CMAKE_CURRENT_BINARY_DIR}/output-${_test}/${_output}.cmp.notime)
      ADD_DEPENDENCIES(${_test}.normalize ${_target_name_copy_output})


      # While it looks like a typo to depend on screen-output and not on
      # ${_output}, there is no rule to generate ${_output}. But generating
      # screen-output will of course generate all output files (including
      # ${_output}), so this rule will work as expected.
      ADD_CUSTOM_COMMAND(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/output-${_test}/${_output}.notime
	COMMAND
	  cat ${CMAKE_CURRENT_BINARY_DIR}/output-${_test}/${_output}
	  | egrep -v '^\\|.*\\|'
	  | egrep -v '^--'
	  | sed 's\#${ASPECT_BASE_DIR}\#ASPECT_DIR\#g'
	  > ${CMAKE_CURRENT_BINARY_DIR}/output-${_test}/${_output}.notime
	DEPENDS ${_test}.normalize)

      # create the target that compares the .notime with the saved file
      ADD_CUSTOM_COMMAND(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/output-${_test}/${_output}.diff
	COMMAND
	    ${CMAKE_CURRENT_SOURCE_DIR}/cmake/diff_test.sh 
		${TEST_DIFF}
		${_test}/${_output}
		${CMAKE_CURRENT_SOURCE_DIR}
		${CMAKE_CURRENT_BINARY_DIR}
	DEPENDS ${_test}.normalize
		${CMAKE_CURRENT_BINARY_DIR}/output-${_test}/${_output}.cmp.notime
		${CMAKE_CURRENT_BINARY_DIR}/output-${_test}/${_output}.notime
      )

      # Add the target for this output file to the dependencies of this
      # test. Note that a target may not contain "/" but outputs can be
      # in subdirectories (for example solution/solution...), so replace them.
      STRING(REPLACE "/" "-" _target_name ${_test}.${_output}.diff)
      ADD_CUSTOM_TARGET(${_target_name}
	DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/output-${_test}/${_output}.diff
	)
      ADD_DEPENDENCIES(tests.${_test} ${_target_name})
    ENDFOREACH()

    # add this test to the dependencies of the overall 'tests' target
    # and declare it to ctest
    ADD_DEPENDENCIES(tests tests.${_test})
    ADD_TEST(NAME ${_test}
      COMMAND
	 ${CMAKE_COMMAND}
	    -DBINARY_DIR=${CMAKE_BINARY_DIR}
	    -DTESTNAME=tests.${_test}
	    -DERROR="Test ${_test} failed"
	    -P ${CMAKE_SOURCE_DIR}/run_test.cmake
	  WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
      )
    SET_TESTS_PROPERTIES(${_test} PROPERTIES
	  TIMEOUT ${TEST_TIME_LIMIT}
      )

  ENDIF()
ENDFOREACH()

# display as important for 'make setup_tests' (stdout is hidden)
IF(PRINT_TEST_SUMMARY_AS_IMPORTANT)
  SET(PRINT_TEST_SUMMARY_AS_IMPORTANT OFF CACHE INTERNAL "" FORCE)
  MESSAGE("Added ${_n_tests} tests.")
ELSE()
  MESSAGE(STATUS "Added ${_n_tests} tests.")
ENDIF()
